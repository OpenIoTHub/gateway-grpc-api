// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GatewayLoginManagerClient is the client API for GatewayLoginManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayLoginManagerClient interface {
	LoginServerByServerInfo(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*LoginResponse, error)
	LoginServerByToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LoginResponse, error)
	GetOpenIoTHubToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error)
	GetGateWayToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error)
}

type gatewayLoginManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayLoginManagerClient(cc grpc.ClientConnInterface) GatewayLoginManagerClient {
	return &gatewayLoginManagerClient{cc}
}

func (c *gatewayLoginManagerClient) LoginServerByServerInfo(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.GatewayLoginManager/LoginServerByServerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayLoginManagerClient) LoginServerByToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/pb.GatewayLoginManager/LoginServerByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayLoginManagerClient) GetOpenIoTHubToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/pb.GatewayLoginManager/GetOpenIoTHubToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayLoginManagerClient) GetGateWayToken(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/pb.GatewayLoginManager/GetGateWayToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayLoginManagerServer is the server API for GatewayLoginManager service.
// All implementations must embed UnimplementedGatewayLoginManagerServer
// for forward compatibility
type GatewayLoginManagerServer interface {
	LoginServerByServerInfo(context.Context, *ServerInfo) (*LoginResponse, error)
	LoginServerByToken(context.Context, *Token) (*LoginResponse, error)
	GetOpenIoTHubToken(context.Context, *Empty) (*Token, error)
	GetGateWayToken(context.Context, *Empty) (*Token, error)
	mustEmbedUnimplementedGatewayLoginManagerServer()
}

// UnimplementedGatewayLoginManagerServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayLoginManagerServer struct {
}

func (UnimplementedGatewayLoginManagerServer) LoginServerByServerInfo(context.Context, *ServerInfo) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginServerByServerInfo not implemented")
}
func (UnimplementedGatewayLoginManagerServer) LoginServerByToken(context.Context, *Token) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginServerByToken not implemented")
}
func (UnimplementedGatewayLoginManagerServer) GetOpenIoTHubToken(context.Context, *Empty) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenIoTHubToken not implemented")
}
func (UnimplementedGatewayLoginManagerServer) GetGateWayToken(context.Context, *Empty) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateWayToken not implemented")
}
func (UnimplementedGatewayLoginManagerServer) mustEmbedUnimplementedGatewayLoginManagerServer() {}

// UnsafeGatewayLoginManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayLoginManagerServer will
// result in compilation errors.
type UnsafeGatewayLoginManagerServer interface {
	mustEmbedUnimplementedGatewayLoginManagerServer()
}

func RegisterGatewayLoginManagerServer(s grpc.ServiceRegistrar, srv GatewayLoginManagerServer) {
	s.RegisterService(&_GatewayLoginManager_serviceDesc, srv)
}

func _GatewayLoginManager_LoginServerByServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayLoginManagerServer).LoginServerByServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GatewayLoginManager/LoginServerByServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayLoginManagerServer).LoginServerByServerInfo(ctx, req.(*ServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayLoginManager_LoginServerByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayLoginManagerServer).LoginServerByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GatewayLoginManager/LoginServerByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayLoginManagerServer).LoginServerByToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayLoginManager_GetOpenIoTHubToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayLoginManagerServer).GetOpenIoTHubToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GatewayLoginManager/GetOpenIoTHubToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayLoginManagerServer).GetOpenIoTHubToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayLoginManager_GetGateWayToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayLoginManagerServer).GetGateWayToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GatewayLoginManager/GetGateWayToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayLoginManagerServer).GetGateWayToken(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GatewayLoginManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GatewayLoginManager",
	HandlerType: (*GatewayLoginManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginServerByServerInfo",
			Handler:    _GatewayLoginManager_LoginServerByServerInfo_Handler,
		},
		{
			MethodName: "LoginServerByToken",
			Handler:    _GatewayLoginManager_LoginServerByToken_Handler,
		},
		{
			MethodName: "GetOpenIoTHubToken",
			Handler:    _GatewayLoginManager_GetOpenIoTHubToken_Handler,
		},
		{
			MethodName: "GetGateWayToken",
			Handler:    _GatewayLoginManager_GetGateWayToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
